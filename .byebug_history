c
cc
c
@blockers = @task.t_blockers
@task= Task.find(id)
params[:id]
 params[:task_id]
 id = (params[:type]== 'blocker') ? params[:task_id] : params[:id]
c
@task
c
 @blockers
c
@blockers.count
@blockers
c
params[:type]== 'blocker'
c
@blockers = Task.find(105).t_blockers
@blockers = @task.t_blockers
@task = Task.find(params[:task_id])
@task
c
params[:type]== 'blocker'
c
@task = Task.find(params[:task_id])
@task
params[:type].present?
@user
task_info[:user_id] = current_user.id
task_info = task_params
c
@blocker = @task.t_blockers.build
@task = Task.find(params[:task_id])
params
@task
params[:type]== 'blocker'
c
@blockers
 @blocker = @task.t_blockers.build
@blockers = @task.t_blockers
@task = Task.find(params[:task_id])
c
@blockers = @task.t_blockers
  @task = Task.find(params[:task_id])
@task
 params[:type]== 'blocker'
c
@blockers = @task.t_blockers
   15:        @blockers = @task.t_blockers
 @task = Task.find(params[:task_id])
@task
 params[:type]== 'blocker'
c
@blockers
  @blockers
 @blocker = @task.t_blockers.new
@blockers = @task.t_blockers
 @task = Task.find(params[:task_id])
params[:type]== 'blocker'
c
@task
c
cc
c
cc
c
@blocker = @task.t_blockers.new
@blockers = @task.t_blockers
@task = Task.find(params[:task_id])
params[:type]== 'blocker'
c
cc
c
 @incomplete_tasks = @tasks.where(["completed_at IS ? and DATE(created_at)=?",nil,d_today]).count
 @incomplete_tasks = @tasks.where(["completed_at IS ? and DATE(created_at)=?",nil,d_today])
@tasks = @user.tasks.where(:list_id=>@list.id)
c
 @incomplete_tasks = @tasks.where(["completed_at IS ? and DATE(created_at)=?",nil,d_today])
 @tasks = @user.tasks.where(:list_id=>@list.id)
c
@complete_tasks.each do @complete; @complete; end
@complete_tasks.each do @complete
@complete_tasks.each
@complete_tasks.empty?
 @complete_tasks = @tasks.where('DATE(completed_at) BETWEEN ? AND ?', d_yesterday , d_today ).order('completed_at')
@incomplete_tasks = @tasks.where(["completed_at IS ? and DATE(created_at)=?",nil,d_today])
 @tasks = @user.tasks.where(:list_id=>@list.id)
c
cc
c
 @incomplete_tasks.count
 @incomplete_tasks
 @complete_tasks = @tasks.where('DATE(completed_at) BETWEEN ? AND ?', d_yesterday , d_today ).order('completed_at')
 @incomplete_tasks = @tasks.where(["completed_at IS ? and DATE(created_at)=?",nil,d_today])
 @tasks = @user.tasks.where(:list_id=>@list.id)
c
@list
c
 @tasks = @user.tasks.where(:list_id=>@list.id)
c
@list
c
@tasks = @user.tasks.where(:list_id=>@list.id)
@list
current_user
 @user
c
get_date
set_date
c
exit
c
cc
c
exit
c
!@list.collaboration_users.empty?
c
current_user
c
@list
c
current_user
@list.owner
@list.collaboration_users
@list
c
@list.collaboration_users
current_user
@list.owner
@list
c
cc
c
exit
c
@list.collaboration_users
@list
c
current_user.collaboration_lists
current_user.collaborations_lists
current_user.collaborations_list
current_user
@list.owner
@list.collaboration_users
c
 @list_users = @list.collaboration_users.where.not(:id=> current_user.id)
c
exit
c
current_user
c
List.find(3)
List.find(3).delete
List.find(3).created_by
List.find(3).owner
List.find(3)
 @collaboration_lists.first
 @collaboration_lists.first.owner
 @collaboration_lists.second.owner
 @collaboration_lists.first.owner
 @collaboration_lists.first
 @collaboration_lists = current_user.collaboration_lists.all
current_user.collaboration_lists.all
current_user.collaboration_lists
current_user
@lists
c
@list
c
exit
c
@list_users
c@list_users
c
cc
c
@list.collaboration_users
@list.collaboration_users.delete(l)
l=@list.collaboration_users
@list.collaboration_users
@list.collaboration_users.delete(User.find(7))
@list.collaboration_users.find(2).delete
@list.collaboration_users.find(2)
@list.collaboration_users
@list
@list_users
c
 @list_users = @list.collaboration_users
c
 @list_users = @list.collaboration_users
c
@list_users = @list.collaboration_users
c
exit
@list_users << @list.collaboration_users
 @list_users=[]
 @list_users << @list.collaboration_users
!owner?
c
cc
c
params
c
params
list_params
c
(!@token.nil?)&&(user.email==@invitation.recipient_email)
@token= params[:invitation_token]
!@token.nil?
(!@token.nil?)&&(user.email==@invitation.recipient_email)
  @invitation = Invitation.find_by_token(params[:invitation_token])
params
@token
@invitation = Invitation.find_by_token(@token)
user && user.authenticate(params[:session][:password]) && user.activated
user = User.find_by_email(params[:session][:email].downcase)
c
@url = url
c@url = url
c
List.last.collaboration_users
User.last.collaboration_lists
User.find(1).collaboration_lists
Colaboration.all
@user.collaboration_lists.push(list) 
list =  Invitation.find_by_token(@token).list_id 
@token != nil
c
@token
params
exit
@token
params
exit
params
params[:invitation_token]
params
c
cc
c
List
subject    'Invitation'
signup_url
invitation
c
  InvitationMailer.send_invitation(@invitation, new_user_path(:invitation_token => @invitation.token)).deliver
  InviteMailer.send_invitation(@invitation, new_user_path(:invitation_token => @invitation.token)).deliver
@invitation
@invitation.save
  @invitation.sender = current_user
 @invitation.sender = current_user
 @invitation = Invitation.new(invitation_params)
invitation_params
c
